/*
 * @author:
 */

package sef.rmit.controller;

import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;
import com.jfoenix.controls.JFXButton;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TableView.TableViewSelectionModel;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import sef.rmit.custom.Graph;
import sef.rmit.util.Util;

@SuppressWarnings({"rawtypes", "unchecked"})
public class ViewGraphController implements Initializable
{
	//Creating new Columns for the table view
	private TableColumn gridNameCol = new TableColumn( "Grid Name" );
	private TableColumn createdUserCol= new TableColumn( "Created User" );
	private TableColumn createdDateCol= new TableColumn( "Created Date" );
	//Creating an observable list of the values to be displayed to the User
	ObservableList<Graph> graphData = FXCollections.observableArrayList();
	
	@FXML
    private TableView<Graph> tableView;

    @FXML
    private Label lblStatus;
    
    @FXML
    private JFXButton cancelButton;
    
	public void getGraphForUser() throws Exception
	{
		//Getting an arraylist of all the graphs generated by the user
		ArrayList GraphArrayList = Graph.getGraphForUser(null, 0);
		for(int incre = 0; incre < GraphArrayList.size(); incre++)
		{
			Graph graphObj = (Graph) GraphArrayList.get(incre);
			if(graphObj != null)
			{
				//Adding graph objects to the observable lsit
				graphData.add(graphObj);
			}
		} 
	}

	@Override
	public void initialize(URL location, ResourceBundle resources) 
	{
		try
		{
			//Getting all the graphs generated by the user
			getGraphForUser();
			//Setting the value factory for the table vlie
	        gridNameCol.setCellValueFactory( new PropertyValueFactory<Graph, String>( "gridName" ) );
	        createdUserCol.setCellValueFactory( new PropertyValueFactory<Graph, String>( "createdUser" ) );
	        createdDateCol.setCellValueFactory( new PropertyValueFactory<Graph, String>( "createdDate" ) );
	        //Setting the table as editable for the user to select any grid
	        tableView.setEditable(true);
	        //adding the observable list to the table view
	        tableView.setItems(graphData);
	        //Adding all the columns to the table view
			tableView.getColumns().addAll(gridNameCol, createdUserCol, createdDateCol);
		}
		catch(Exception exp)
		{
			lblStatus.setText("Error while connecting to DB.");
		}
		
	}
	
	/*
	 *
	 * @Parameters: MouseEvent Object
	 * @throws Exception
	 * @returns: NULL
	 * @function: Opens the selected GRID UI
	 * 
	 */
	public void graphViewKeyEvent(MouseEvent eventObj) throws Exception
	{
		try
		{	if(LoginController.getLoggedInData().getUserRole().equals("USER"))
        	{
				//getting the selection row from the tableView
		        TableViewSelectionModel selectionModel = tableView.getSelectionModel();
		        //Casting the tableview row to graph object
		        Graph graphObj = (Graph) selectionModel.getSelectedItem();
				if(graphObj != null)
				{
					//Invoking the graph to be displayed to the user
					DisplayGraphController.setGraph(graphObj);
				}
				else
				{
					lblStatus.setText("Error during Graph Generation.");
				}
        	}
			else
			{
				lblStatus.setText("Permission Denied.");
			}
		}
		catch(Exception exp)
		{
			//lblStatus.setText("Connection Failed.");
		}
	}

	/*
	 *
	 * @parameters: ActionEvent Object
	 * @throws: Exception
	 * @returns NULL
	 * @function: redirect to the dashboard UI
	 */
    @FXML
    void redirectToDashBoard(ActionEvent event) throws Exception 
    {
    	Util.displayUX(DashboardController.class, "fxml/Dashboard.fxml", null);
    }
	
}
